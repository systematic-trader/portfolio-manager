import {
  array,
  boolean,
  enums,
  format,
  type GuardType,
  integer,
  literal,
  number,
  optional,
  props,
  string,
  union,
} from 'https://raw.githubusercontent.com/systematic-trader/type-guard/main/mod.ts'
import { BondType } from '../derives/bond-type.ts'
import { BondsCouponType } from '../derives/bonds-coupon-type.ts'
import { Currency3 } from '../derives/currency.ts'
import { DefaultSlippageType } from '../derives/default-slippage-type.ts'
import { DisplayHintType } from '../derives/display-hint-type.ts'
import { LotSizeType } from '../derives/lot-size-type.ts'
import { NonTradableReason } from '../derives/non-tradable-reason.ts'
import { OrderTriggerPriceType } from '../derives/order-trigger-price-type.ts'
import { PlaceableOrderType } from '../derives/placeable-order-type.ts'
import { StrategyType } from '../derives/strategy-type.ts'
import { SupportedStrategyType } from '../derives/supported-strategy-type.ts'
import { TradingSignal } from '../derives/trading-signal.ts'
import { TradingStatus } from '../derives/trading-status.ts'
import { TradingUnitsPluralType, TradingUnitsSingularType } from '../derives/trading-units-type.ts'
import { UnderlyingTypeCategory } from '../derives/underlying-type-category.ts'
import { ExchangeSummary } from './exchange-summary.ts'
import { InstrumentKey } from './instrument-key.ts'
import { InstrumentTradeSessions } from './instrument-trade-sessions.ts'
import { IpoDetails } from './ipo-details.ts'
import { OrderDistances } from './order-distances.ts'
import { OrderSetting } from './order-setting.ts'
import { PriceDisplayFormat } from './price-display-format.ts'
import { RelatedOptionRoot } from './related-option-root.ts'
import { StrategyLeg } from './strategy-leg.ts'
import { SupportedOrderTypeSetting } from './supported-order-type-setting.ts'
import { TickSizeScheme } from './tick-size-scheme.ts'

export type InstrumentDetailsType =
  | InstrumentDetailsBond
  | InstrumentDetailsCfdOnCompanyWarrant
  | InstrumentDetailsCfdOnEtc
  | InstrumentDetailsCfdOnEtf
  | InstrumentDetailsCfdOnEtn
  | InstrumentDetailsCfdOnFund
  | InstrumentDetailsCfdOnFutures
  | InstrumentDetailsCfdOnIndex
  | InstrumentDetailsCfdOnRights
  | InstrumentDetailsCfdOnStock
  | InstrumentDetailsCompanyWarrant
  | InstrumentDetailsContractFutures
  | InstrumentDetailsEtc
  | InstrumentDetailsEtf
  | InstrumentDetailsEtn
  | InstrumentDetailsFund
  | InstrumentDetailsFuturesStrategy
  | InstrumentDetailsFxForwards
  | InstrumentDetailsFxNoTouchOption
  | InstrumentDetailsFxOneTouchOption
  | InstrumentDetailsFxSpot
  | InstrumentDetailsFxSwap
  | InstrumentDetailsFxVanillaOption
  | InstrumentDetailsRights
  | InstrumentDetailsStock
  | InstrumentDetailsStockIndex

export interface InstrumentDetailsStock extends GuardType<typeof InstrumentDetailsStock> {}
export const InstrumentDetailsStock = props({
  AssetType: literal('Stock'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: optional(ExchangeSummary),
  Format: PriceDisplayFormat,
  FractionalMinimumLotSize: optional(number()),
  GroupId: integer(),
  IncrementSize: number(),
  IpoDetails: optional(IpoDetails),
  IsBailIn: optional(boolean()),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsExtendedTradingHoursEnabled: optional(boolean()),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsSystematicInternaliser: optional(boolean()),
  IsTradable: boolean(),
  LotSize: optional(number()),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  MinimumOrderValue: optional(number()),
  MinimumTradeSize: optional(number()),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  PriceToContractFactor: optional(number()),
  PrimaryListing: optional(integer()),
  RelatedInstruments: optional(array(InstrumentKey)),
  RelatedOptionRoots: optional(array(integer())), // Deprecated
  RelatedOptionRootsEnhanced: optional(array(RelatedOptionRoot)),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  SupportedStrategies: optional(array(SupportedStrategyType)),
  Symbol: string(),
  TickSize: optional(number()),
  TickSizeScheme: optional(TickSizeScheme),
  TradableAs: optional(array(literal('Stock'))),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export interface InstrumentDetailsBond extends GuardType<typeof InstrumentDetailsBond> {}
export const InstrumentDetailsBond = props({
  AssetType: literal('Bond'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  BondIndexRatio: number(),
  BondsMarginValue: number(),
  BondsReferenceRate: string(),
  BondsTypes: array(BondType),
  BondType: BondType,
  Coupon: number(),
  CouponCurrency: Currency3,
  CouponType: BondsCouponType,
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: ExchangeSummary,
  ExpiryDate: format('gregorian-date'),
  Format: PriceDisplayFormat,
  GroupId: integer(),
  IncrementSize: number(),
  IsBailIn: optional(boolean()),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: optional(boolean()),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IssueDate: format('date-iso8601'),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSize: number(),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  MinimumTradeSize: number(),
  NbbStatus: union([literal('None'), literal('XN'), literal('X')]),
  NonTradableReason: NonTradableReason,
  OrderSetting: OrderSetting,
  PriceToContractFactor: number(),
  RelatedInstruments: optional(array(InstrumentKey)),
  RelatedOptionRoots: optional(array(integer())), // Deprecated
  RelatedOptionRootsEnhanced: optional(array(RelatedOptionRoot)),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  Symbol: string(),
  TickSize: number(),
  TradableAs: optional(array(literal('Bond'))),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingAssetType: optional(literal('Stock')),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
  UnderlyingUic: optional(integer()),
})

export interface InstrumentDetailsFund extends GuardType<typeof InstrumentDetailsFund> {}
export const InstrumentDetailsFund = props({
  AssetType: literal('Fund'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  FractionalMinimumLotSize: optional(number()),
  GroupId: integer(),
  IncrementSize: number(),
  IsBailIn: optional(boolean()),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: optional(boolean()),
  IsExtendedTradingHoursEnabled: optional(boolean()),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsSystematicInternaliser: boolean(),
  IsTradable: boolean(),
  LotSize: optional(number()),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  MinimumOrderValue: optional(number()),
  MinimumTradeSize: optional(number()),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  PriceToContractFactor: optional(number()),
  PrimaryListing: optional(integer()),
  RelatedInstruments: optional(array(InstrumentKey)),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  SupportedStrategies: optional(array(SupportedStrategyType)),
  Symbol: string(),
  TickSize: optional(number()),
  TickSizeScheme: optional(TickSizeScheme),
  TradableAs: optional(array(literal('Fund'))),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export interface InstrumentDetailsCfdOnCompanyWarrant extends GuardType<typeof InstrumentDetailsCfdOnCompanyWarrant> {}
export const InstrumentDetailsCfdOnCompanyWarrant = props({
  AssetType: literal('CfdOnCompanyWarrant'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  FractionalMinimumLotSize: optional(number()),
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsExtendedTradingHoursEnabled: optional(boolean()),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  MinimumTradeSize: optional(number()),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  PriceToContractFactor: optional(number()),
  PrimaryListing: optional(integer()),
  RelatedInstruments: array(InstrumentKey),
  ShortTradeDisabled: optional(boolean()),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  SupportedStrategies: optional(array(SupportedStrategyType)),
  Symbol: string(),
  TickSize: optional(number()),
  TickSizeScheme: optional(TickSizeScheme),
  TradableAs: optional(array(literal('CfdOnCompanyWarrant'))),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export interface InstrumentDetailsCfdOnEtc extends GuardType<typeof InstrumentDetailsCfdOnEtc> {}
export const InstrumentDetailsCfdOnEtc = props({
  AssetType: literal('CfdOnEtc'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  FractionalMinimumLotSize: number(),
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsExtendedTradingHoursEnabled: boolean(),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  MinimumTradeSize: number(),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  PriceToContractFactor: number(),
  PrimaryListing: optional(integer()),
  RelatedInstruments: array(InstrumentKey),
  ShortTradeDisabled: boolean(),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  SupportedStrategies: array(SupportedStrategyType),
  Symbol: string(),
  TickSize: optional(number()),
  TickSizeScheme: optional(TickSizeScheme),
  TradableAs: array(literal('CfdOnEtc')),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export interface InstrumentDetailsCfdOnEtf extends GuardType<typeof InstrumentDetailsCfdOnEtf> {}
export const InstrumentDetailsCfdOnEtf = props({
  AssetType: literal('CfdOnEtf'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  FractionalMinimumLotSize: optional(number()),
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsExtendedTradingHoursEnabled: optional(boolean()),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSize: optional(number()),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  MinimumTradeSize: optional(number()),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  PriceToContractFactor: optional(number()),
  PrimaryListing: optional(integer()),
  RelatedInstruments: optional(array(InstrumentKey)),
  RelatedOptionRoots: optional(array(integer())), // Deprecated
  RelatedOptionRootsEnhanced: optional(array(RelatedOptionRoot)),
  ShortTradeDisabled: optional(boolean()),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  SupportedStrategies: array(SupportedStrategyType),
  Symbol: string(),
  TickSize: optional(number()),
  TickSizeScheme: optional(TickSizeScheme),
  TradableAs: optional(array(literal('CfdOnEtf'))),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export interface InstrumentDetailsCfdOnEtn extends GuardType<typeof InstrumentDetailsCfdOnEtn> {}
export const InstrumentDetailsCfdOnEtn = props({
  AssetType: literal('CfdOnEtn'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  FractionalMinimumLotSize: number(),
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsExtendedTradingHoursEnabled: boolean(),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  MinimumTradeSize: number(),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  PriceToContractFactor: number(),
  RelatedInstruments: array(InstrumentKey),
  RelatedOptionRoots: optional(array(integer())), // Deprecated
  RelatedOptionRootsEnhanced: optional(array(RelatedOptionRoot)),
  ShortTradeDisabled: boolean(),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  SupportedStrategies: array(SupportedStrategyType),
  Symbol: string(),
  TickSizeScheme: TickSizeScheme,
  TradableAs: array(literal('CfdOnEtn')),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export interface InstrumentDetailsCfdOnFund extends GuardType<typeof InstrumentDetailsCfdOnFund> {}
export const InstrumentDetailsCfdOnFund = props({
  AssetType: literal('CfdOnFund'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  FractionalMinimumLotSize: number(),
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsExtendedTradingHoursEnabled: boolean(),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  MinimumTradeSize: number(),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  PriceToContractFactor: number(),
  PrimaryListing: optional(integer()),
  RelatedInstruments: array(InstrumentKey),
  ShortTradeDisabled: boolean(),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  SupportedStrategies: array(SupportedStrategyType),
  Symbol: string(),
  TickSizeScheme: TickSizeScheme,
  TradableAs: array(literal('CfdOnFund')),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export interface InstrumentDetailsCfdOnFutures extends GuardType<typeof InstrumentDetailsCfdOnFutures> {}
export const InstrumentDetailsCfdOnFutures = props({
  AssetType: literal('CfdOnFutures'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: optional(number()),
  DefaultSlippageType: optional(DefaultSlippageType),
  Description: string(),
  DisplayHint: optional(DisplayHintType),
  Exchange: ExchangeSummary,
  ExpiryDate: format('gregorian-date'),
  ExpiryDateTime: format('date-iso8601'),
  Format: PriceDisplayFormat,
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: optional(boolean()),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSize: number(),
  LotSizeType: LotSizeType,
  MinimumLotSize: number(),
  MinimumOrderValue: number(),
  NonTradableReason: NonTradableReason,
  OrderDistances: optional(OrderDistances),
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  PriceToContractFactor: number(),
  PrimaryListing: optional(integer()),
  RelatedInstruments: array(InstrumentKey),
  RelatedOptionRoots: optional(array(integer())), // Deprecated
  RelatedOptionRootsEnhanced: optional(array(RelatedOptionRoot)),
  StandardAmounts: optional(array(number())),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  Symbol: string(),
  TickSize: number(),
  TradableAs: optional(array(literal('CfdOnFutures'))),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  TradingUnitsPlural: optional(TradingUnitsPluralType),
  TradingUnitsSingular: optional(TradingUnitsSingularType),
  Uic: integer(),
  UnderlyingTypeCategory: optional(UnderlyingTypeCategory),
  UnderlyingUic: integer(),
})

export interface InstrumentDetailsCfdOnIndex extends GuardType<typeof InstrumentDetailsCfdOnIndex> {}
export const InstrumentDetailsCfdOnIndex = props({
  AssetType: literal('CfdOnIndex'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceToContractFactor: number(),
  RelatedInstruments: array(InstrumentKey),
  RelatedOptionRoots: optional(array(integer())), // Deprecated
  RelatedOptionRootsEnhanced: optional(array(RelatedOptionRoot)),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  Symbol: string(),
  TickSize: number(),
  TradableAs: array(literal('CfdOnIndex')),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
  UnderlyingUic: integer(),
})

export interface InstrumentDetailsCfdOnRights extends GuardType<typeof InstrumentDetailsCfdOnRights> {}
export const InstrumentDetailsCfdOnRights = props({
  AssetType: literal('CfdOnRights'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  PrimaryListing: optional(integer()),
  RelatedInstruments: array(InstrumentKey),
  ShortTradeDisabled: optional(boolean()),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  SupportedStrategies: array(SupportedStrategyType),
  Symbol: string(),
  TickSize: optional(integer()),
  TickSizeScheme: optional(TickSizeScheme),
  TradableAs: optional(array(enums(['CfdOnRights']))),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export interface InstrumentDetailsCfdOnStock extends GuardType<typeof InstrumentDetailsCfdOnStock> {}
export const InstrumentDetailsCfdOnStock = props({
  AssetType: literal('CfdOnStock'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  FractionalMinimumLotSize: optional(number()),
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsExtendedTradingHoursEnabled: optional(boolean()),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSize: optional(number()),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  MinimumOrderValue: optional(number()),
  MinimumTradeSize: optional(number()),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  PriceToContractFactor: optional(number()),
  PrimaryListing: optional(integer()),
  RelatedInstruments: optional(array(InstrumentKey)),
  RelatedOptionRoots: optional(array(integer())), // Deprecated
  RelatedOptionRootsEnhanced: optional(array(RelatedOptionRoot)),
  ShortTradeDisabled: optional(boolean()),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  SupportedStrategies: optional(array(SupportedStrategyType)),
  Symbol: string(),
  TickSize: optional(number()),
  TickSizeScheme: optional(TickSizeScheme),
  TradableAs: optional(array(literal('CfdOnStock'))),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export interface InstrumentDetailsCompanyWarrant extends GuardType<typeof InstrumentDetailsCompanyWarrant> {}
export const InstrumentDetailsCompanyWarrant = props({
  AssetType: literal('CompanyWarrant'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  FractionalMinimumLotSize: optional(number()),
  GroupId: integer(),
  IncrementSize: number(),
  IsBailIn: optional(boolean()),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsExtendedTradingHoursEnabled: optional(boolean()),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSize: optional(number()),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  MinimumTradeSize: optional(number()),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  PriceToContractFactor: optional(number()),
  PrimaryListing: optional(integer()),
  RelatedInstruments: optional(array(InstrumentKey)),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  SupportedStrategies: optional(array(SupportedStrategyType)),
  Symbol: string(),
  TickSize: optional(number()),
  TickSizeScheme: optional(TickSizeScheme),
  TradableAs: optional(array(literal('CompanyWarrant'))),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export interface InstrumentDetailsContractFutures extends GuardType<typeof InstrumentDetailsContractFutures> {}
export const InstrumentDetailsContractFutures = props({
  AssetType: literal('ContractFutures'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  ContractSize: integer({ minimum: 1 }),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  DisplayHint: optional(DisplayHintType),
  Exchange: ExchangeSummary,
  ExpiryDate: format('gregorian-date'),
  Format: PriceDisplayFormat,
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsPitTraded: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSizeText: string(),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  MinimumTradeSize: number(),
  NonTradableReason: NonTradableReason,
  NoticeDate: optional(format('gregorian-date')),
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceToContractFactor: number(),
  PriceCurrency: optional(Currency3),
  PrimaryListing: optional(integer()),
  RelatedInstruments: optional(array(InstrumentKey)),
  RelatedOptionRoots: optional(array(integer())), // Deprecated
  RelatedOptionRootsEnhanced: optional(array(RelatedOptionRoot)),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  SupportedStrategies: optional(array(SupportedStrategyType)),
  Symbol: string(),
  TickSize: number(),
  TradableAs: optional(array(literal('ContractFutures'))),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export interface InstrumentDetailsEtc extends GuardType<typeof InstrumentDetailsEtc> {}
export const InstrumentDetailsEtc = props({
  AssetType: literal('Etc'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  FractionalMinimumLotSize: optional(number()),
  GroupId: integer(),
  IncrementSize: number(),
  IsBailIn: optional(boolean()),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsExtendedTradingHoursEnabled: optional(boolean()),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsSystematicInternaliser: boolean(),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  MinimumTradeSize: optional(number()),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  PriceToContractFactor: optional(number()),
  PrimaryListing: optional(integer()),
  RelatedInstruments: optional(array(InstrumentKey)),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  SupportedStrategies: optional(array(SupportedStrategyType)),
  Symbol: string(),
  TickSize: optional(number()),
  TickSizeScheme: optional(TickSizeScheme),
  TradableAs: optional(array(literal('Etc'))),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export interface InstrumentDetailsEtf extends GuardType<typeof InstrumentDetailsEtf> {}
export const InstrumentDetailsEtf = props({
  AssetType: literal('Etf'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  FractionalMinimumLotSize: optional(number()),
  GroupId: integer(),
  IncrementSize: number(),
  IsBailIn: optional(boolean()),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: optional(boolean()),
  IsExtendedTradingHoursEnabled: optional(boolean()),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsSystematicInternaliser: boolean(),
  IsTradable: boolean(),
  LotSize: optional(number()),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  MinimumTradeSize: optional(number()),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  PriceToContractFactor: optional(number()),
  PrimaryListing: optional(integer()),
  RelatedInstruments: optional(array(InstrumentKey)),
  RelatedOptionRoots: optional(array(integer())), // Deprecated
  RelatedOptionRootsEnhanced: optional(array(RelatedOptionRoot)),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  SupportedStrategies: optional(array(SupportedStrategyType)),
  Symbol: string(),
  TickSize: optional(number()),
  TickSizeScheme: optional(TickSizeScheme),
  TradableAs: optional(array(literal('Etf'))),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export interface InstrumentDetailsEtn extends GuardType<typeof InstrumentDetailsEtn> {}
export const InstrumentDetailsEtn = props({
  AssetType: literal('Etn'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  FractionalMinimumLotSize: optional(number()),
  GroupId: integer(),
  IncrementSize: number(),
  IsBailIn: optional(boolean()),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsExtendedTradingHoursEnabled: optional(boolean()),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsSystematicInternaliser: boolean(),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  MinimumTradeSize: optional(number()),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  PriceToContractFactor: optional(number()),
  PrimaryListing: optional(integer()),
  RelatedInstruments: optional(array(InstrumentKey)),
  RelatedOptionRoots: optional(array(integer())), // Deprecated
  RelatedOptionRootsEnhanced: optional(array(RelatedOptionRoot)),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  SupportedStrategies: optional(array(SupportedStrategyType)),
  Symbol: string(),
  TickSize: optional(number()),
  TickSizeScheme: optional(TickSizeScheme),
  TradableAs: optional(array(literal('Etn'))),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export interface InstrumentDetailsFuturesStrategy extends GuardType<typeof InstrumentDetailsFuturesStrategy> {}
export const InstrumentDetailsFuturesStrategy = props({
  AssetType: literal('FuturesStrategy'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  ContractSize: integer({ minimum: 1 }),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: ExchangeSummary,
  ExpiryDate: format('gregorian-date'),
  Format: PriceDisplayFormat,
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsPitTraded: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  Legs: array(StrategyLeg),
  LotSizeText: string(),
  LotSizeType: LotSizeType,
  MinimumTradeSize: number(),
  NonTradableReason: NonTradableReason,
  NoticeDate: optional(format('gregorian-date')),
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceToContractFactor: number(),
  PriceCurrency: Currency3,
  PrimaryListing: optional(integer()),
  RelatedInstruments: optional(array(InstrumentKey)),
  RelatedOptionRoots: optional(array(integer())), // Deprecated
  RelatedOptionRootsEnhanced: optional(array(RelatedOptionRoot)),
  StandardAmounts: array(number()),
  StrategyType,
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  Symbol: string(),
  TickSize: number(),
  TradableAs: optional(array(literal('FuturesStrategy'))),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export interface InstrumentDetailsFxForwards extends GuardType<typeof InstrumentDetailsFxForwards> {}
export const InstrumentDetailsFxForwards = props({
  AssetType: literal('FxForwards'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  DisplayHint: optional(DisplayHintType),
  Description: string(),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  FxForwardMaxForwardDate: format('date-iso8601'),
  FxForwardMinForwardDate: format('date-iso8601'),
  FxSpotDate: format('date-iso8601'),
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  MinimumTradeSize: number(),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  Symbol: string(),
  TickSize: number(),
  TickSizeLimitOrder: number(),
  TickSizeStopOrder: number(),
  TradableAs: array(enums(['FxSpot', 'FxForwards', 'FxSwap'])),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingAssetType: literal('FxSpot'),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
  UnderlyingUic: integer(),
})

export interface InstrumentDetailsFxNoTouchOption extends GuardType<typeof InstrumentDetailsFxNoTouchOption> {}
export const InstrumentDetailsFxNoTouchOption = props({
  AssetType: literal('FxNoTouchOption'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  Description: string(),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  FxForwardMaxForwardDate: format('date-iso8601'),
  FxForwardMinForwardDate: format('date-iso8601'),
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  MinimumTradeSize: number(),
  NonTradableReason: NonTradableReason,
  OptionsChainSubscriptionAllowed: boolean(),
  OrderSetting: OrderSetting,
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  Symbol: string(),
  TickSize: number(),
  TradableAs: array(enums(['FxSpot', 'FxForwards', 'FxSwap'])),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingAssetType: literal('FxSpot'),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
  UnderlyingUic: integer(),
})

export interface InstrumentDetailsFxOneTouchOption extends GuardType<typeof InstrumentDetailsFxOneTouchOption> {}
export const InstrumentDetailsFxOneTouchOption = props({
  AssetType: literal('FxOneTouchOption'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  Description: string(),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  FxForwardMaxForwardDate: format('date-iso8601'),
  FxForwardMinForwardDate: format('date-iso8601'),
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  MinimumTradeSize: number(),
  NonTradableReason: NonTradableReason,
  OptionsChainSubscriptionAllowed: boolean(),
  OrderSetting: OrderSetting,
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  Symbol: string(),
  TickSize: number(),
  TradableAs: array(enums(['FxSpot', 'FxForwards', 'FxSwap'])),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingAssetType: literal('FxSpot'),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
  UnderlyingUic: integer(),
})

export interface InstrumentDetailsFxSpot extends GuardType<typeof InstrumentDetailsFxSpot> {}
export const InstrumentDetailsFxSpot = props({
  AssetType: literal('FxSpot'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  DisplayHint: optional(DisplayHintType),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  FxForwardMaxForwardDate: optional(format('date-iso8601')),
  FxForwardMinForwardDate: optional(format('date-iso8601')),
  FxSpotDate: format('date-iso8601'),
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  MinimumTradeSize: number(),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  Symbol: string(),
  TickSize: number(),
  TickSizeLimitOrder: number(),
  TickSizeStopOrder: number(),
  TradableAs: array(enums(['FxSpot', 'FxForwards', 'FxSwap'])),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export interface InstrumentDetailsFxSwap extends GuardType<typeof InstrumentDetailsFxSwap> {}
export const InstrumentDetailsFxSwap = props({
  AssetType: literal('FxSwap'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  DisplayHint: optional(DisplayHintType),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  FxForwardMaxForwardDate: format('date-iso8601'),
  FxForwardMinForwardDate: format('date-iso8601'),
  FxSpotDate: format('date-iso8601'),
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  MinimumTradeSize: number(),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  Symbol: string(),
  TickSize: number(),
  TickSizeLimitOrder: number(),
  TickSizeStopOrder: number(),
  TradableAs: array(enums(['FxSpot', 'FxForwards', 'FxSwap'])),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingAssetType: literal('FxSpot'),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
  UnderlyingUic: integer(),
})

export interface InstrumentDetailsFxVanillaOption extends GuardType<typeof InstrumentDetailsFxVanillaOption> {}
export const InstrumentDetailsFxVanillaOption = props({
  AssetType: literal('FxVanillaOption'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CanParticipateInMultiLegOrder: boolean(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  Description: string(),
  DisplayHint: optional(DisplayHintType),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  FxForwardMaxForwardDate: format('date-iso8601'),
  FxForwardMinForwardDate: format('date-iso8601'),
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  MinimumTradeSize: number(),
  NonTradableReason: NonTradableReason,
  OptionsChainSubscriptionAllowed: boolean(),
  OrderSetting: OrderSetting,
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  Symbol: string(),
  TickSize: number(),
  TradableAs: array(enums(['FxSpot', 'FxForwards', 'FxSwap'])),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingAssetType: literal('FxSpot'),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
  UnderlyingUic: optional(integer()),
})

export interface InstrumentDetailsRights extends GuardType<typeof InstrumentDetailsRights> {}
export const InstrumentDetailsRights = props({
  AssetType: literal('Rights'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: optional(ExchangeSummary),
  Format: PriceDisplayFormat,
  FractionalMinimumLotSize: optional(number()),
  GroupId: integer(),
  IncrementSize: number(),
  IsBailIn: optional(boolean()),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsExtendedTradingHoursEnabled: optional(boolean()),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  MinimumTradeSize: optional(number()),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  PriceToContractFactor: optional(number()),
  PrimaryListing: integer(),
  RelatedInstruments: optional(array(InstrumentKey)),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  SupportedStrategies: optional(array(SupportedStrategyType)),
  Symbol: string(),
  TickSize: optional(number()),
  TickSizeScheme: optional(TickSizeScheme),
  TradableAs: optional(array(literal('Rights'))),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export interface InstrumentDetailsStockIndex extends GuardType<typeof InstrumentDetailsStockIndex> {}
export const InstrumentDetailsStockIndex = props({
  AssetType: literal('StockIndex'),
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  Description: string(),
  Exchange: ExchangeSummary,
  Format: PriceDisplayFormat,
  GroupId: integer(),
  IncrementSize: number(),
  IsBarrierEqualsStrike: boolean(),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()),
  NonTradableReason: NonTradableReason,
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  RelatedInstruments: optional(array(InstrumentKey)),
  RelatedOptionRoots: optional(array(integer())), // Deprecated
  RelatedOptionRootsEnhanced: optional(array(RelatedOptionRoot)),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  Symbol: string(),
  TickSize: optional(number()),
  TickSizeScheme: optional(TickSizeScheme),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})
