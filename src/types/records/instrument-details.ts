import {
  array,
  boolean,
  format,
  integer,
  literal,
  number,
  optional,
  props,
  string,
  union,
} from 'https://raw.githubusercontent.com/systematic-trader/type-guard/main/mod.ts'
import { BondType } from '../derives/bond-type.ts'
import { BondsCouponType } from '../derives/bonds-coupon-type.ts'
import { Currency3 } from '../derives/currency.ts'
import { DefaultSlippageType } from '../derives/default-slippage-type.ts'
import { LotSizeType } from '../derives/lot-size-type.ts'
import { NonTradableReason } from '../derives/non-tradable-reason.ts'
import { OrderTriggerPriceType } from '../derives/order-trigger-price-type.ts'
import { PlaceableOrderType } from '../derives/placeable-order-type.ts'
import { SupportedStrategyType } from '../derives/supported-strategy-type.ts'
import { TradingSignal } from '../derives/trading-signal.ts'
import { TradingStatus } from '../derives/trading-status.ts'
import { UnderlyingTypeCategory } from '../derives/underlying-type-category.ts'
import { ExchangeSummary } from './exchange-summary.ts'
import { InstrumentKey } from './instrument-key.ts'
import { InstrumentTradeSessions } from './instrument-trade-sessions.ts'
import { IpoDetails } from './ipo-details.ts'
import { OrderDistances } from './order-distances.ts'
import { OrderSetting } from './order-setting.ts'
import { PriceDisplayFormat } from './price-display-format.ts'
import { RelatedOptionRoot } from './related-option-root.ts'
import { SupportedOrderTypeSetting } from './supported-order-type-setting.ts'
import { TickSizeScheme } from './tick-size-scheme.ts'

export const _Optionals = {
  IsBailIn: optional(literal(undefined)),
  MinimumLotSize: optional(literal(undefined)),
  RelatedInstruments: optional(literal(undefined)),
}

const BaseInstrumentDetails = props({
  ..._Optionals,
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Format: PriceDisplayFormat,
  GroupId: integer(),
  IncrementSize: number(),
  IsBailIn: optional(boolean()), // optional
  IsBarrierEqualsStrike: boolean(),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  MinimumLotSize: optional(number()), // optional
  NonTradableReason: NonTradableReason,
  OrderSetting: OrderSetting,
  RelatedInstruments: optional(array(InstrumentKey)), // optional
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  Symbol: string(),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export const StockInstrumentDetails = BaseInstrumentDetails.merge({
  AssetType: literal('Stock'),
  Exchange: optional(ExchangeSummary),
  FractionalMinimumLotSize: optional(number()),
  IpoDetails: optional(IpoDetails),
  IsComplex: boolean(),
  IsExtendedTradingHoursEnabled: optional(boolean()),
  IsSystematicInternaliser: boolean(),
  LotSize: optional(number()),
  MinimumOrderValue: optional(number()),
  MinimumTradeSize: optional(number()),
  OrderDistances: OrderDistances,
  PriceCurrency: Currency3,
  PriceToContractFactor: optional(number()),
  PrimaryListing: optional(integer()),
  RelatedOptionRoots: optional(array(integer())), // Deprecated
  RelatedOptionRootsEnhanced: optional(array(RelatedOptionRoot)),
  SupportedStrategies: optional(array(SupportedStrategyType)),
  TickSizeScheme: optional(TickSizeScheme),
  TickSize: optional(number()),
  TradableAs: optional(array(literal('Stock'))),
})

export const FundInstrumentDetails = BaseInstrumentDetails.merge({
  AssetType: literal('Fund'),
  Exchange: ExchangeSummary,
  FractionalMinimumLotSize: optional(number()),
  IsComplex: optional(boolean()),
  IsExtendedTradingHoursEnabled: optional(boolean()),
  IsSystematicInternaliser: boolean(),
  MinimumOrderValue: optional(number()),
  MinimumTradeSize: optional(number()),
  OrderDistances: OrderDistances,
  PriceCurrency: Currency3,
  PriceToContractFactor: optional(number()),
  PrimaryListing: optional(integer()),
  SupportedStrategies: optional(array(SupportedStrategyType)),
  TickSizeScheme: optional(TickSizeScheme),
  TickSize: optional(number()),
  TradableAs: optional(array(literal('Fund'))),
})

export const BondInstrumentDetails = BaseInstrumentDetails.merge({
  AssetType: literal('Bond'),
  BondIndexRatio: number(),
  BondType: BondType,
  BondsMarginValue: number(),
  BondsReferenceRate: string(),
  BondsTypes: array(BondType),
  Coupon: number(),
  CouponCurrency: union([Currency3, literal('')]),
  CouponType: BondsCouponType,
  Exchange: ExchangeSummary,
  ExpiryDate: format('gregorian-date'),
  IsComplex: optional(boolean()),
  IssueDate: format('date-iso8601'),
  LotSize: number(),
  MinimumTradeSize: number(),
  NbbStatus: union([literal('None'), literal('XN'), literal('X')]),
  PriceToContractFactor: number(),
  RelatedOptionRoots: optional(array(integer())), // Deprecated
  RelatedOptionRootsEnhanced: optional(array(RelatedOptionRoot)),
  TickSize: number(),
  TradableAs: optional(array(literal('Bond'))),
  UnderlyingAssetType: optional(literal('Stock')),
  UnderlyingUic: optional(integer()),
})

export const CfdOnCompanyWarrantInstrumentDetails = props({
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  AssetType: literal('CfdOnCompanyWarrant'),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: optional(ExchangeSummary),
  Format: PriceDisplayFormat,
  FractionalMinimumLotSize: optional(number()),
  GroupId: integer(),
  IncrementSize: number(),
  IpoDetails: optional(IpoDetails),
  IsBailIn: optional(boolean()),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsExtendedTradingHoursEnabled: optional(boolean()),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsSystematicInternaliser: optional(boolean()),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  LotSize: optional(number()),
  MinimumLotSize: optional(number()),
  MinimumOrderValue: optional(number()),
  MinimumTradeSize: optional(number()),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  PriceToContractFactor: optional(number()),
  PrimaryListing: optional(integer()),
  RelatedInstruments: optional(array(InstrumentKey)),
  RelatedOptionRootsEnhanced: optional(array(RelatedOptionRoot)),
  ShortTradeDisabled: optional(boolean()),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  SupportedStrategies: optional(array(SupportedStrategyType)),
  Symbol: string(),
  TickSizeScheme: optional(TickSizeScheme),
  TickSize: optional(number()),
  TradableAs: optional(array(literal('CfdOnCompanyWarrant'))),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})

export const CfdOnEtcInstrumentDetails = props({
  AffiliateInfoRequired: boolean(),
  AmountDecimals: integer(),
  AssetType: literal('CfdOnEtc'),
  CurrencyCode: Currency3,
  DefaultAmount: number(),
  DefaultSlippage: number(),
  DefaultSlippageType: DefaultSlippageType,
  Description: string(),
  Exchange: optional(ExchangeSummary),
  Format: PriceDisplayFormat,
  FractionalMinimumLotSize: optional(number()),
  GroupId: integer(),
  IncrementSize: number(),
  IpoDetails: optional(IpoDetails),
  IsBailIn: optional(boolean()),
  IsBarrierEqualsStrike: boolean(),
  IsComplex: boolean(),
  IsExtendedTradingHoursEnabled: optional(boolean()),
  IsOcoOrderSupported: boolean(),
  IsPEAEligible: boolean(),
  IsPEASMEEligible: boolean(),
  IsRedemptionByAmounts: boolean(),
  IsSwitchBySameCurrency: boolean(),
  IsSystematicInternaliser: optional(boolean()),
  IsTradable: boolean(),
  LotSizeType: LotSizeType,
  LotSize: optional(number()),
  MinimumLotSize: optional(number()),
  MinimumOrderValue: optional(number()),
  MinimumTradeSize: optional(number()),
  NonTradableReason: NonTradableReason,
  OrderDistances: OrderDistances,
  OrderSetting: OrderSetting,
  PriceCurrency: Currency3,
  PriceToContractFactor: optional(number()),
  PrimaryListing: optional(integer()),
  RelatedInstruments: optional(array(InstrumentKey)),
  RelatedOptionRootsEnhanced: optional(array(RelatedOptionRoot)),
  ShortTradeDisabled: optional(boolean()),
  StandardAmounts: array(number()),
  SupportedOrderTriggerPriceTypes: array(OrderTriggerPriceType),
  SupportedOrderTypes: array(PlaceableOrderType),
  SupportedOrderTypeSettings: array(SupportedOrderTypeSetting),
  SupportedStrategies: optional(array(SupportedStrategyType)),
  Symbol: string(),
  TickSizeScheme: optional(TickSizeScheme),
  TickSize: optional(number()),
  TradableAs: optional(array(literal('CfdOnEtc'))),
  TradableOn: array(format('positive-integer')),
  TradingSessions: InstrumentTradeSessions,
  TradingSignals: TradingSignal,
  TradingStatus: TradingStatus,
  Uic: integer(),
  UnderlyingTypeCategory: UnderlyingTypeCategory,
})
